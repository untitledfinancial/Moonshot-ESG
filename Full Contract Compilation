// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DOVPAXBRANCH is ERC20, Ownable {
    address public feeCollector;
    uint256 public constant FEE_PERCENTAGE = 2; // 2% fee

    event FeeCollectorChanged(address indexed oldFeeCollector, address indexed newFeeCollector);

    constructor(uint256 initialSupply, address _feeCollector) ERC20("DOVPAXBRANCH", "DOV") {
        _mint(msg.sender, initialSupply);
        feeCollector = _feeCollector;
    }

    function setFeeCollector(address newFeeCollector) external onlyOwner {
        require(newFeeCollector != address(0), "Invalid address");
        address oldFeeCollector = feeCollector;
        feeCollector = newFeeCollector;
        emit FeeCollectorChanged(oldFeeCollector, newFeeCollector);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal override {
        uint256 fee = (amount * FEE_PERCENTAGE) / 100;
        uint256 amountAfterFee = amount - fee;

        super._transfer(sender, feeCollector, fee); // Transfer the fee to the fee collector
        super._transfer(sender, recipient, amountAfterFee); // Transfer the remaining amount to the recipient
    }

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    function burn(address from, uint256 amount) external onlyOwner {
        _burn(from, amount);
    }
}
